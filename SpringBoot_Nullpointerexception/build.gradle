plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

compileJava {
    options.compilerArgs << '-parameters'


    repositories {
        mavenCentral()
    }

    dependencies {
// https://mvnrepository.com/artifact/org.projectlombok/lombok
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'

        implementation 'io.springfox:springfox-swagger2:2.9.2'
        implementation 'io.springfox:springfox-swagger-ui:2.9.2'
        implementation 'io.springfox:springfox-swagger2:2.9.2'
        implementation 'io.springfox:springfox-swagger-ui:2.9.2'
        // implementation 'org.springframework.boot:spring-boot-starter-security'
       // implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.7.4'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: '2.7.4'
// https://mvnrepository.com/artifact/net.sf.ehcache/ehcache
        implementation 'org.ehcache:ehcache:3.8.1'
        implementation 'javax.cache:cache-api:1.1.1'
// https://mvnrepository.com/artifact/org.liquibase/liquibase-core
       // implementation group: 'org.liquibase', name: 'liquibase-core', version: '4.17.0'
        runtimeOnly 'mysql:mysql-connector-java'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        testCompileOnly 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
       // testImplementation group: 'com.h2database', name: 'h2', version: '2.1.214'
    }
    test {
        useJUnitPlatform()
    }

    task generatePostsAndComments() {
        doLast {
            File dataSql = file("src/main/resources/data.SQL")
            dataSql.write("")
            //posty
            for (int i = 1; i <= 100; i++) {
                dataSql.append("insert into post(id, title, content, created) " +
                        "values (${i}, 'Test post ${i}', 'Content ${i}', '" + LocalDateTime.now().minusDays(100 - i) + "');\n")
            }
            //komentarze
            for (int i = 1; i <= 100; i++) {
                int postId = 1 + i / 10
                dataSql.append("insert into comment(id, post_id, content, created) " +
                        "values (${i}, ${postId}, 'Comment ${i}', '" + LocalDateTime.now().minusDays(100 - i) + "');\n")
            }
        }
    }
}